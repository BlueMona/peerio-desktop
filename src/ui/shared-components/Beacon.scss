$arrow-size: 12px;

// Rounded 'tabs' on either side of the circle or arrow, to make it look more continuous with text box
@mixin tab-base($x, $y) {
  content: ' ';
  position: absolute;

  // Circular cut-out effect is made by using a transparent radial-background with a very quick color transition
  // Somewhat hacky but there aren't really better alternatives
  background: radial-gradient(
    circle at $x $y,
    transparent 50%,
    $peerio-purple 51%
  );
}

/*
  SpotBeacon uses relative size/positioning for tabs, so they will grow with the bubble size.
  So size and positioning should be adaptable to different bubble sizes generally,
  though note that, since bubble has static border of 4px, tab positioning will grow inaccurate when bubble is really, really huge.
*/
@mixin tab-relative($x, $y) {
  @include tab-base($x, $y);
  height: 25%;
  width: 25%;
}

@mixin tab-pixel($x, $y) {
  @include tab-base($x, $y);
  height: 6px;
  width: 6px;
}

// Positioning for the beacon overall, and styles for the beacon's main rectangular portion
.beacon {
  position: fixed;
  z-index: 20;
  left: 50%;
  top: 50%;
  transition: opacity 250ms;
  opacity: 0;

  &.show {
    opacity: 1;
  }

  .rectangle {
    position: absolute;
    width: 272px;
    min-height: 40px;
    padding: 0 $padding-small;
    color: $white;
    box-shadow: $shadow-8;
    background-color: $peerio-purple;
    border-radius: 8px;

    .rectangle-content {
      position: relative;
      padding: $padding-small;

      .header {
        margin-bottom: $margin-default;
        font-weight: $font-weight-bold;
      }
    }

    &.narrow {
      font-weight: $font-weight-semibold;
    }

    &.left {
      left: 100%;
      padding-right: $padding-small;
    }

    &.right {
      right: 100%;
      padding-left: $padding-small;
    }
  }
}

// SpotBeacon and Bubble styles
.spot-beacon {
  .circle {
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    min-height: 32px;
    min-width: 32px;

    /*
      The rules for these tabs are very annoying.
      In general, :before = top tab, :after = bottom tab.
      The default tabs are defined first, followed by the individual "slice" exceptions.
    */
    @mixin tab-top-left() {
      @include tab-relative(0, 0);
      left: 31%;
      top: -16%;
    }

    @mixin tab-bottom-left() {
      @include tab-relative(0, 100%);
      left: 31%;
      bottom: -16%;
    }

    @mixin tab-bottom-right() {
      @include tab-relative(100%, 100%);
      right: 31%;
      bottom: -16%;
    }

    @mixin tab-top-right() {
      @include tab-relative(100%, 0);
      right: 31%;
      top: -16%;
    }

    // stylelint-disable-next-line
    &.left {
      &::before {
        @include tab-top-left;
      }

      &::after {
        @include tab-bottom-left;
      }

      &.slice-1::before {
        @include tab-top-right;
        left: auto;
        right: -16%;
        top: 31%;
        bottom: auto;
      }

      &.slice-5::after {
        @include tab-bottom-right;
        left: auto;
        right: -16%;
        top: auto;
        bottom: 31%;
      }
    }

    &.right {
      &::before {
        @include tab-top-right;
      }

      &::after {
        @include tab-bottom-right;
      }

      &.slice-1::after {
        @include tab-top-left;
        left: -16%;
        right: auto;
        top: 31%;
        bottom: auto;
      }

      &.slice-5::after {
        @include tab-bottom-left;
        left: -16%;
        right: auto;
        top: auto;
        bottom: 31%;
      }
    }

    &.slice-2::before {
      display: none;
    }

    &.slice-4::after {
      display: none;
    }

    &.narrow {
      &.slice-2,
      &.slice-3,
      &.slice-4 {
        &::before,
        &::after {
          display: none;
        }
      }
    }
  }

  .circle-content {
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    // z-index: 2;
    height: 100%;
    width: 100%;
    color: $black;
    box-shadow: inset 0 0 12px -2px $black;
    background-color: $white;
    border: 4px solid $peerio-purple;
    border-radius: 100%;
  }
}

// AreaBeacon and Arrow styles
.area-beacon {
  pointer-events: none;

  .rectangle {
    pointer-events: all;
  }

  .arrow {
    content: ' ';
    position: absolute;
    pointer-events: none;
    height: 0;
    width: 0;
    border: solid transparent;
    // border-color: $peerio-purple;
    border-width: $arrow-size;

    &.top {
      left: 50%;
      bottom: 0;
      margin-left: -$arrow-size;
      border-bottom-color: $peerio-purple;
    }

    &.right {
      left: 0;
      top: 50%;
      margin-top: -$arrow-size;
      border-left-color: $peerio-purple;
    }

    &.bottom {
      left: 50%;
      top: 0;
      margin-left: -$arrow-size;
      border-top-color: $peerio-purple;
    }

    &.left {
      right: 0;
      top: 50%;
      margin-top: -$arrow-size;
      border-right-color: $peerio-purple;
    }
  }
}
